#include <esp_now.h>
#include <WiFi.h>

#define CHANNEL 1
#define MAX_SLAVES 6

int slaveCount;

esp_now_peer_info_t slave[MAX_SLAVES];
float data;

int trig = 14;
int echo = 13;



void setup() {
  Serial.begin(9600);

  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);

  WiFi.mode(WIFI_STA);

  if (esp_now_init() != ESP_OK) {
    Serial.println("ESP-NOW init failed");
    return;
  }

  esp_now_register_send_cb(OnDataSent);

  ScanForSlave();
}

void loop() {

  data = measureDist();
  for (int i = 0; i < slaveCount; i++) {

    esp_err_t result = esp_now_send(slave[i].peer_addr, (uint8_t *)&data, sizeof(data));
    if (result == ESP_OK) {
      Serial.print("Sent -> ");
      Serial.println(data);
    } else {
      Serial.print("Send failed: ");
      Serial.println(result);
    }
  }



  delay(300);
  data++;
}

void ScanForSlave() {
  int8_t scanResults = WiFi.scanNetworks();
  slaveCount = 0;

  for (int i = 0; i < scanResults; ++i) {
    String SSID = WiFi.SSID(i);
    String BSSIDstr = WiFi.BSSIDstr(i);


    if (SSID.startsWith("RX_") and slaveCount < MAX_SLAVES) {
      int mac[6];
      if (6 == sscanf(BSSIDstr.c_str(), "%x:%x:%x:%x:%x:%x", &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5])) {
        for (int j = 0; j < 6; ++j) {
          slave[slaveCount].peer_addr[j] = (uint8_t)mac[j];
        }

        slave[slaveCount].channel = CHANNEL;
        slave[slaveCount].encrypt = 0;
        esp_now_add_peer(&slave[slaveCount]);

        Serial.print("Found and set receiver MAC: ");
        for (int j = 0; j < 6; j++) {
          Serial.printf("%02X", slave[slaveCount].peer_addr[j]);
          if (j < 5) Serial.print(":");
        }
        Serial.println();
      }
    }
  }
}

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("I sent my data -> ");
  Serial.println(String(data) + "m");
}

float measureDist() {
  float pingTime;
  float pingDist;
  float totalDist;

  for (int i = 1; i <= 10; i++) {
    digitalWrite(trig, LOW);
    delayMicroseconds(2);
    digitalWrite(trig, HIGH);
    delayMicroseconds(10);
    digitalWrite(trig, LOW);

    pingTime = pulseIn(echo, HIGH);
    pingDist = (pingTime * 0.000343) / 2;

    totalDist = totalDist + pingDist;
  }
  totalDist = totalDist / 10;
  return totalDist;
}

